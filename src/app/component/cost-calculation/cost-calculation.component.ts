import { CommonModule, NgIf } from '@angular/common';
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';

@Component({
  selector: 'app-cost-calculation',
  standalone: true,
  imports: [NgIf, ReactiveFormsModule, CommonModule],
  templateUrl: './cost-calculation.component.html',
  styleUrl: './cost-calculation.component.css'
})
export class CostCalculationComponent {
  step = 0; // √âtape actuelle
  totalCost = 0;
  unitCost = 0;
  suggestedPrice = 0;
  
  // Liste des cat√©gories de co√ªt avec leurs param√®tres en fran√ßais
  costCategories = [
    { name: 'Mati√®res premi√®res', fields: ['quantit√© (kg)', 'prix unitaire (‚Ç¨)', 'transport (‚Ç¨)', 'pertes (‚Ç¨)'] },
    { name: 'Main-d\'≈ìuvre', fields: ['heures', 'taux horaire (‚Ç¨)', 'charges sociales (‚Ç¨)'] },
    { name: 'Packaging', fields: ['cout Mat√©riaux (‚Ç¨)', 'cout Confection (‚Ç¨)', 'volume Emballage'] },
    { name: 'Publicit√©', fields: ['cout campagne (‚Ç¨)', 'cout cr√©atif (‚Ç¨)', 'cout m√©dia (‚Ç¨)'] },
    { name: '√ânergie', fields: ['consommation energie (KWH)', 'prix KWH (‚Ç¨)', 'couts fixes (‚Ç¨)'] },
    { name: 'Amortissement', fields: ['valeur acquisition (‚Ç¨)', 'dur√©e vie (ann√©e)', 'valeur r√©siduelle (‚Ç¨)'] },
    { name: 'Frais indirects', fields: ['loyer (‚Ç¨)', 'entretien (‚Ç¨)', 'assurances (‚Ç¨)', 'services publics (‚Ç¨)', 'administration (‚Ç¨)'] }
  ];

  costForm: FormGroup;

  constructor(private fb: FormBuilder) {
    this.costForm = this.fb.group({});
    this.initializeCategoryFields();
  }

  // Initialisation des champs dynamiques
  initializeCategoryFields() {
    this.costCategories.forEach(category => {
      category.fields.forEach(field => {
        const sanitizedField = this.sanitizeFieldName(field);
        this.costForm.addControl(sanitizedField, this.fb.control(0, Validators.min(0))); 
      });
    });
  
    // Champs finaux pour le calcul
    this.costForm.addControl('margeBeneficiaire', this.fb.control('', [Validators.required, Validators.min(0)]));
    this.costForm.addControl('margeErreur', this.fb.control('', [Validators.min(0)]));
    this.costForm.addControl('totalUnites', this.fb.control('', [Validators.required, Validators.min(1)]));
  }
  
  // Fonction pour nettoyer les noms de champs
  sanitizeFieldName(field: string): string {
    return field.replace(/[^a-zA-Z0-9]/g, '_'); // Remplace les caract√®res sp√©ciaux par '_'
  }  

  // Passe √† l'√©tape suivante
  nextStep() {
    if (this.step < this.costCategories.length) {
      this.step++;
    }
  }

  // Revient √† l'√©tape pr√©c√©dente
  previousStep() {
    if (this.step > 0) {
      this.step--;
    }
  }

  // Passe une √©tape sans remplir
  skipStep() {
    this.nextStep();
  }

  getTitleCase(field: string): string {
    return field.replace(/\w\S*/g, (txt) => {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  }
  // Effectuer le calcul du co√ªt total
  calculateCost() {
    let totalCost = 0;
    const values = this.costForm.value;
  
    console.log("üü¢ D√©but du calcul...");
  
    this.costCategories.forEach(category => {
      switch (category.name) {
        case 'Mati√®res premi√®res':
          totalCost += (values[this.sanitizeFieldName('quantit√© (kg)')] * values[this.sanitizeFieldName('prix unitaire (‚Ç¨)')]) 
                        + values[this.sanitizeFieldName('transport (‚Ç¨)')] + values[this.sanitizeFieldName('pertes (‚Ç¨)')];
          break;
        case 'Main-d\'≈ìuvre':
          totalCost += (values[this.sanitizeFieldName('heures')] * values[this.sanitizeFieldName('taux horaire (‚Ç¨)')]) 
                        + values[this.sanitizeFieldName('charges sociales (‚Ç¨)')];
          break;
        case 'Packaging':
          totalCost += (values[this.sanitizeFieldName('cout Mat√©riaux (‚Ç¨)')] + values[this.sanitizeFieldName('cout Confection (‚Ç¨)')]) 
                        * values[this.sanitizeFieldName('volume Emballage')];
          break;
        case 'Publicit√©':
          totalCost += values[this.sanitizeFieldName('cout campagne (‚Ç¨)')] + values[this.sanitizeFieldName('cout cr√©atif (‚Ç¨)')] 
                        + values[this.sanitizeFieldName('cout m√©dia (‚Ç¨)')];
          break;
        case '√ânergie':
          totalCost += (values[this.sanitizeFieldName('consommation energie (KWH)')] * values[this.sanitizeFieldName('prix unitaire (‚Ç¨)')]) 
                        + values[this.sanitizeFieldName('couts fixes (‚Ç¨)')];
          break;
        case 'Amortissement':
          totalCost += (values[this.sanitizeFieldName('valeur acquisition (‚Ç¨)')] - values[this.sanitizeFieldName('valeur r√©siduelle (‚Ç¨)')]) 
                        / values[this.sanitizeFieldName('dur√©e vie (ann√©e)')];
          break;
        case 'Frais indirects':
          totalCost += values[this.sanitizeFieldName('loyer (‚Ç¨)')] + values[this.sanitizeFieldName('entretien (‚Ç¨)')] 
                        + values[this.sanitizeFieldName('assurances (‚Ç¨)')] + values[this.sanitizeFieldName('services publics (‚Ç¨)')] 
                        + values[this.sanitizeFieldName('administration (‚Ç¨)')];
          break;
      }
    });
  
    if (values.totalUnites > 0) {
      this.unitCost = totalCost / values.totalUnites;
      this.suggestedPrice = this.unitCost * (1 + values.margeBeneficiaire / 100);
    } else {
      console.error("‚ö†Ô∏è Erreur : Le nombre total d'unit√©s doit √™tre sup√©rieur √† 0 !");
      return;
    }
  
    this.totalCost = totalCost;
  
    console.log("‚úÖ Co√ªt total : ", this.totalCost);
    console.log("‚úÖ Co√ªt unitaire : ", this.unitCost);
    console.log("‚úÖ Prix recommand√© : ", this.suggestedPrice);
  
    setTimeout(() => {
      this.step = this.costCategories.length + 1;
      console.log("‚úÖ √âtape apr√®s calcul : ", this.step);
    });
  }
  
  
}
